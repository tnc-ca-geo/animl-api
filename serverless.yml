org: animl
app: animl
service: animl-api
# variablesResolutionMode: 20210326

package:
  patterns:
    - '!backups/**'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  profile: animl
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::GetAtt:
                - inferenceQueue
                - Arn
        - Effect: Allow
          Action:
            - sagemaker:InvokeEndpoint
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - ssm:GetParameters
          Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: "*"
  apiGateway:
    apiKeys:
      - name: animlApiKeyInternal-${self:provider.stage}
        value: '{{resolve:secretsmanager:api-key-${self:provider.stage}:SecretString:apikey}}'

functions:
  graphql:
    handler: src/api/handler.server
    events:
    - http:
        path: /
        method: post
        cors: true
    - http:
        path: /internal
        method: post
        cors: true
        private: true
    - http:
        path: /external
        method: post
        cors:
          headers: '*'
        authorizer:
            name: CognitoAuthN
            type: COGNITO_USER_POOLS
            arn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/{{resolve:ssm:/application/cognito/userPoolId:1}}
    memorySize: 3008
    timeout: 30
  playground:
    handler: src/api/handler.playground
    events:
    - http:
        path: /
        method: get
        cors: true
        #authorizer:
        #    name: CognitoAuthN
        #    type: COGNITO_USER_POOLS
        #    arn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/{{resolve:ssm:/application/cognito/userPoolId:1}}
    timeout: 20
  inference:
    handler: src/ml/handler.inference
    reservedConcurrency: 10 # max number of lambdas to invoke at one time
    events:
      - eventBridge:
          schedule: rate(1 minute)
      # - sqs:
      #     arn:
      #       Fn::GetAtt:
      #         - inferenceQueue
      #         - Arn
      #     batchSize: 1
    timeout: 120

resources:
  Resources:

    # Secrets Manager secret for API key
    apiKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: API Key that will allow access for the APIs
        GenerateSecretString:
            GenerateStringKey: apikey
            SecretStringTemplate: '{"user": "api"}'
        Name: api-key-${self:provider.stage}

    # Inference SQS queue
    inferenceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: inferenceQueue-${self:provider.stage}
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - inferenceDeadLetterQueue
              - Arn
          maxReceiveCount: 5

    # Inference - dead-letter SQS queue
    inferenceDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: inferenceDLQ-${self:provider.stage}
        MessageRetentionPeriod: 1209600 # 14 days in seconds

    # SSM Param - API URL
    SSMParameterApiurl:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl API url
        Name: /api/url-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${opt:stage, self:provider.stage, 'dev'}/internal/

    # SSM Param - inference queue url
    SSMParameterInferencequeue:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Inference queue url
        Name: /ml/inference-queue-url-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: !Ref inferenceQueue

    # SSM Param - Megadetector API url
    SSMParameterMegadetectorapiurl:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Megadetector API url
        Name: /ml/megadetector-api-url-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: 'https://aiforearth.azure-api.net/api/v1/camera-trap/sync/detect'

    # NOTE: SSM Params /ml/megadetector-api-key and /db/mongo-db-url
    # contain secret keys so need to be created manually in the AWS console
