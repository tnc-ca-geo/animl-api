#
# inputs
#

input ClearBatchErrorsInput {
  batch: String!
}

input ClearImageErrorsInput {
  batch: String!
}

input CloseUploadPart {
  ETag: String!
  PartNumber: Int!
}
input CloseUploadInput {
  batchId: String!
  multipartUploadId: String!
  parts: [CloseUploadPart]!
}

input CreateBatchErrorInput {
  error: String!
  batch: String!
}

input PointInput {
  type: String!
  coordinates: [Float!]!
}
input LocationInput {
  _id: ID!
  geometry: PointInput!
  altitude: String
  name: String
}
input DeploymentInput {
  _id: ID!
  name: String!
  description: String
  location: LocationInput
  timezone: String!
  startDate: Date!
  editable: Boolean
}
input CreateDeploymentInput {
  cameraId: ID!
  deployment: DeploymentInput!
}

input CreateImageCommentInput {
  imageId: ID!
  comment: String!
}

input CreateImageErrorInput {
  error: String!
  image: String
  batch: String
}

input CreateImageInput {
  md: JSONObject!
}

input CreateInternalLabelInput {
  labelId: String!
  conf: Float
  bbox: [Float!]!
  mlModel: String!
  mlModelVersion: String!
  imageId: ID
}
input CreateInternalLabelsInput {
  labels: [CreateInternalLabelInput]!
}

input ValidationInput {
  validated: Boolean!
  validationDate: Date
  userId: ID!
}
input CreateLabelInput {
  _id: ID
  labelId: String!
  conf: Float
  bbox: [Float!]!
  labeledDate: Date
  validation: ValidationInput
  userId: ID
  imageId: ID
  objectId: ID
}
input CreateLabelsInput {
  labels: [CreateLabelInput]!
}

input ObjectInput {
  _id: ID!
  bbox: [Float!]
  locked: Boolean!
  labels: [CreateLabelInput]
}
input CreateObjectInput {
  imageId: ID!
  object: ObjectInput!
}
input CreateObjectsInput {
  objects: [CreateObjectInput]!
}

input CreateProjectInput {
  name: String!
  description: String!
  timezone: String!
  availableMLModels: [String]!
}

input CreateProjectLabelInput {
  name: String!
  color: String!
  reviewerEnabled: Boolean
}

input CreateUploadInput {
  originalFile: String!
  partCount: Int
}

input CreateUserInput {
  username: String!
  roles: [UserRole]!
}

input CreateViewInput {
  filters: FiltersInput!
  name: String!
  description: String
  editable: Boolean!
}

input DeleteDeploymentInput {
  cameraId: ID!
  deploymentId: ID!
}

input DeleteImageCommentInput {
  imageId: ID!
  id: String!
}

input DeleteImagesInput {
  imageIds: [ID!]
}

input DeleteLabelInput {
  imageId: ID!
  objectId: ID!
  labelId: ID!
}
input DeleteLabelsInput {
  labels: [DeleteLabelInput]!
}

input DeleteObjectInput {
  imageId: ID!
  objectId: ID!
}
input DeleteObjectsInput {
  objects: [DeleteObjectInput]!
}

input DeleteProjectLabelInput {
  _id: ID!
}

input DeleteViewInput {
  viewId: ID!
}

enum filterEnum {
  CURRENT
  COMPLETED
}
input QueryBatchesInput {
  filter: filterEnum
  paginatedField: String
  sortAscending: Boolean
  limit: Int
  next: String
  previous: String
}

enum Format {
  csv
  coco
}
input QueryExportAnnotationsInput {
  format: Format!
  filters: FiltersInput!
}

input QueryExportErrorsInput {
  filters: ImageErrorsFilterInput!
}

input ImageErrorsFilterInput {
  batch: String!
}
input QueryImageErrorsInput {
  paginatedField: String
  sortAscending: Boolean
  limit: Int
  next: String
  previous: String
  filters: ImageErrorsFilterInput!
}

input QueryImageInput {
  imageId: ID!
}

input QueryImagesCountInput {
  filters: FiltersInput!
}

input FiltersInput {
  createdStart: Date
  createdEnd: Date
  addedStart: Date
  addedEnd: Date
  cameras: [String!]
  deployments: [String!]
  labels: [String]
  reviewed: Boolean
  custom: String
}
input QueryImagesInput {
  paginatedField: String
  sortAscending: Boolean
  limit: Int
  next: String
  previous: String
  filters: FiltersInput!
}

input QueryMLModelsInput {
  _ids: [String!]
}

input QueryProjectsInput {
  _ids: [String!]
}

input QueryStatsInput {
  filters: FiltersInput!
}

input QueryTaskInput {
  taskId: ID!
}

input QueryTasksInput {
  paginatedField: String
  sortAscending: Boolean
  limit: Int
  next: String
  previous: String
}

input QueryUsersInput {
  filter: String
}

input QueryWirelessCamerasInput {
  _ids: [String!]
}

input RedriveBatchInput {
  batch: String
}

input RegisterCameraInput {
  cameraId: ID!
  make: String!
}

input StopBatchInput {
  batch: String!
}

input UnregisterCameraInput {
  cameraId: ID!
}

input AutomationEventInput {
  type: String!
  label: String
}
input AutomationActionInput {
  type: String!
  mlModel: String
  alertRecipients: [String]
  confThreshold: Float
  categoryConfig: JSONObject
}
input AutomationRuleInput {
  _id: ID
  name: String!
  event: AutomationEventInput!
  action: AutomationActionInput!
}
input UpdateAutomationRulesInput {
  automationRules: [AutomationRuleInput]
}

input UpdateBatchInput {
  _id: String!
  total: Int
  overrideSerial: String
  uploadComplete: Date
  ingestionComplete: Date
  processingEnd: Date
  processingStart: Date
  originalFile: String
  uploadedFile: String
}

input DeploymentDiffsInput {
  name: String
  description: String
  location: LocationInput
  timezone: String
  startDate: Date
  editable: Boolean
}
input UpdateDeploymentInput {
  cameraId: ID!
  deploymentId: ID!
  diffs: DeploymentDiffsInput!
}

input UpdateImageCommentInput {
  imageId: ID!
  id: String!
  comment: String!
}

input LabelDiffsInput {
  locked: Boolean
  validation: ValidationInput
}
input LabelUpdate {
  imageId: ID!
  objectId: ID!
  labelId: ID!
  diffs: LabelDiffsInput!
}
input UpdateLabelsInput {
  updates: [LabelUpdate]!
}

input ObjectDiffsInput {
  locked: Boolean
  bbox: [Float!]
}
input ObjectUpdate {
  imageId: ID!
  objectId: ID!
  diffs: ObjectDiffsInput!
}
input UpdateObjectsInput {
  updates: [ObjectUpdate]!
}

input UpdateProjectInput {
  name: String
  description: String
}

input UpdateProjectLabelInput {
  _id: ID!
  name: String!
  color: String!
  reviewerEnabled: Boolean
}

input UpdateUserInput {
  username: String!
  roles: [UserRole]!
}

input ViewDiffsInput {
  name: String
  description: String
  filters: FiltersInput
}
input UpdateViewInput {
  viewId: ID!
  diffs: ViewDiffsInput!
}

#
# objects
#

type AutomationEvent {
  type: String!
  label: String
}
type AutomationAction {
  type: String!
  alertRecipients: [String]
  mlModel: String
  confThreshold: Float
  categoryConfig: JSONObject
}
type AutomationRule {
  _id: ID!
  name: String!
  event: AutomationEvent!
  action: AutomationAction!
}

type Batch {
  _id: String!
  projectId: String!
  created: Date
  errors: [BatchError]
  imageErrors: Int
  uploadComplete: Date
  ingestionComplete: Date
  processingStart: Date
  processingEnd: Date
  stoppingInitiated: Date
  overrideSerial: String
  originalFile: String
  uploadedFile: String
  remaining: Int
  dead: Int
  total: Int
}

type BatchError {
  _id: String!
  batch: String!
  error: String!
  created: Date!
}

type Filters {
  cameras: [String]
  deployments: [String]
  labels: [String]
  createdStart: Date
  createdEnd: Date
  addedStart: Date
  addedEnd: Date
  reviewed: Boolean
  notReviewed: Boolean
  custom: String
}

type Image {
  _id: ID!
  batchId: String
  errors: [ImageError]
  bucket: String!
  fileTypeExtension: String!
  path: String
  dateAdded: Date!
  dateTimeOriginal: Date!
  timezone: String!
  make: String!
  cameraId: String!
  deploymentId: ID!
  projectId: String!
  originalFileName: String
  imageWidth: Int
  imageHeight: Int
  imageBytes: Int
  mimeType: String
  userSetData: JSONObject
  model: String
  location: Location
  reviewed: Boolean
  objects: [Object]
  comments: [ImageComment]
}

type ImageMetadata {
  _id: ID!
  bucket: String
  batchId: String
  fileTypeExtension: String
  path: String
  dateAdded: Date
  dateTimeOriginal: Date
  timezone: String
  make: String
  cameraId: String
  originalFileName: String
  imageWidth: Int
  imageHeight: Int
  imageBytes: Int
  mimeType: String
  model: String
}
type ImageAttempt {
  _id: ID!
  projectId: String!
  batch: String
  created: Date!
  metadata: ImageMetadata
  errors: [ImageError]
}

type ImageComment {
  _id: ID!
  created: Date!
  author: String!
  comment: String!
}

type ImageError {
  _id: String!
  batch: String
  image: String
  path: String
  error: String!
  created: Date!
}

type Validation {
  validated: Boolean!
  validationDate: Date!
  userId: ID!
}
type Label {
  _id: ID!
  type: String!
  labelId: String!
  conf: Float
  bbox: [Float!]!
  labeledDate: Date!
  validation: Validation
  mlModel: String
  mlModelVersion: String
  userId: ID
}
type LabelList {
  categories: [String]
}
type Object {
  _id: ID!
  bbox: [Float!]
  locked: Boolean!
  labels: [Label]
}

type Point {
  type: String!
  coordinates: [Float!]!
}
type Location {
  _id: ID!
  geometry: Point!
  altitude: String
  name: String
}

type Categories {
  _id: String!
  name: String!
  color: String!
}
type MLModel {
  _id: String!
  description: String
  version: String!
  defaultConfThreshold: Float
  categories: [Categories]
}

type PageInfo {
  previous: String
  hasPrevious: Boolean
  next: String
  hasNext: Boolean
}

type Deployment {
  _id: ID!
  name: String!
  description: String
  location: Location
  timezone: String!
  startDate: Date
  editable: Boolean
}
type CameraConfig {
  _id: String!
  deployments: [Deployment!]!
}
type ProjectLabel {
  _id: String!
  name: String!
  color: String!
  reviewerEnabled: Boolean!
}
type Project {
  _id: String!
  name: String!
  timezone: String!
  description: String
  views: [View!]!
  automationRules: [AutomationRule]
  cameraConfigs: [CameraConfig]
  labels: [ProjectLabel]
  availableMLModels: [String]
}

scalar Date
scalar JSONObject

type Task {
  _id: ID!
  user: String!
  projectId: String!
  type: String!
  status: String!
  created: Date!
  updated: Date!
  output: JSONObject
}

enum UserRole {
  manager
  member
  observer
}
type User {
  roles: [UserRole]!
  username: String!
  email: String!
  created: String!
  updated: String!
  enabled: Boolean!
  status: String!
}

type View {
  _id: String!
  name: String!
  filters: Filters!
  description: String
  editable: Boolean!
}

type ProjectRegistration {
  _id: ID!
  projectId: String!
  active: Boolean!
}
type WirelessCamera {
  _id: String!
  make: String!
  model: String
  projRegistrations: [ProjectRegistration!]!
}

#
# payloads
#

type BatchPayload {
  batch: Batch
}

type BatchesConnection {
  pageInfo: PageInfo
  batches: [Batch]!
}

type CreateImagePayload {
  imageAttempt: ImageAttempt
}

type CreateUploadPayload {
  batch: String!
  multipartUploadId: String
  user: String!
  url: String
  urls: [String]
}

type CreateViewPayload {
  view: View
}

type DeleteViewPayload {
  project: Project
}

type ExportPayload {
  documentId: ID!
}

type ExportError {
  message: String
}
type ExportStatusPayload {
  status: String!
  url: String
  count: Int
  meta: JSONObject
  error: [ExportError]
}

type ImageCommentsPayload {
  comments: [ImageComment]
}

type ImageErrorsConnection {
  pageInfo: PageInfo
  errors: [ImageError]!
}

type ImagesConnection {
  pageInfo: PageInfo
  images: [Image]!
}

type ImagesCount {
  count: Int
}

type ProjectLabelPayload {
  label: ProjectLabel
}

type ProjectPayload {
  project: Project
}

type RegisterCameraPayload {
  project: Project
  wirelessCameras: [WirelessCamera]
}

type StandardErrorPayload {
  isOk: Boolean
  errors: [String]
}

type StandardPayload {
  isOk: Boolean
}

type TasksPayload {
  tasks: [Task]!
}

type UnregisterCameraPayload {
  project: Project
  wirelessCameras: [WirelessCamera]
}

type UpdateAutomationRulesPayload {
  automationRules: [AutomationRule]
}

type UpdateViewPayload {
  view: View
}

type UsersPayload {
  users: [User]!
}

#
# root
#

type Mutation {
  createImage(input: CreateImageInput!): CreateImagePayload
  deleteImages(input: DeleteImagesInput!): StandardErrorPayload
  createImageComment(input: CreateImageCommentInput!): ImageCommentsPayload
  updateImageComment(input: UpdateImageCommentInput!): ImageCommentsPayload
  deleteImageComment(input: DeleteImageCommentInput!): ImageCommentsPayload
  createUser(input: CreateUserInput!): StandardPayload
  updateUser(input: UpdateUserInput!): StandardPayload
  createUpload(input: CreateUploadInput!): CreateUploadPayload
  closeUpload(input: CloseUploadInput!): StandardPayload
  updateBatch(input: UpdateBatchInput!): BatchPayload
  stopBatch(input: StopBatchInput!): StandardPayload
  redriveBatch(input: RedriveBatchInput!): StandardPayload
  createProject(input: CreateProjectInput!): ProjectPayload
  updateProject(input: UpdateProjectInput!): ProjectPayload
  createProjectLabel(input: CreateProjectLabelInput!): ProjectLabelPayload
  updateProjectLabel(input: UpdateProjectLabelInput!): ProjectLabelPayload
  deleteProjectLabel(input: DeleteProjectLabelInput!): StandardPayload
  createBatchError(input: CreateBatchErrorInput!): BatchError
  createImageError(input: CreateImageErrorInput!): ImageError
  clearImageErrors(input: ClearImageErrorsInput!): StandardPayload
  clearBatchErrors(input: ClearBatchErrorsInput!): StandardPayload
  registerCamera(input: RegisterCameraInput!): RegisterCameraPayload
  unregisterCamera(input: UnregisterCameraInput!): UnregisterCameraPayload
  createView(input: CreateViewInput!): CreateViewPayload
  updateView(input: UpdateViewInput!): UpdateViewPayload
  deleteView(input: DeleteViewInput!): DeleteViewPayload
  updateAutomationRules(input: UpdateAutomationRulesInput!): UpdateAutomationRulesPayload
  createObjects(input: CreateObjectsInput!): StandardPayload
  updateObjects(input: UpdateObjectsInput!): StandardPayload
  deleteObjects(input: DeleteObjectsInput!): StandardPayload
  createInternalLabels(input: CreateInternalLabelsInput!): StandardPayload
  createLabels(input: CreateLabelsInput!): StandardPayload
  updateLabels(input: UpdateLabelsInput!): StandardPayload
  deleteLabels(input: DeleteLabelsInput!): StandardPayload
  createDeployment(input: CreateDeploymentInput!): Task
  updateDeployment(input: UpdateDeploymentInput!): Task
  deleteDeployment(input: DeleteDeploymentInput!): Task
}

type Query {
  users(input: QueryUsersInput): UsersPayload
  tasks(input: QueryTasksInput): TasksPayload
  task(input: QueryTaskInput!): Task
  projects(input: QueryProjectsInput): [Project]
  image(input: QueryImageInput!): Image
  images(input: QueryImagesInput!): ImagesConnection
  imagesCount(input: QueryImagesCountInput!): ImagesCount
  imageErrors(input: QueryImageErrorsInput!): ImageErrorsConnection
  labels: LabelList
  wirelessCameras(input: QueryWirelessCamerasInput): [WirelessCamera]
  mlModels(input: QueryMLModelsInput): [MLModel]
  batches(input: QueryBatchesInput!): BatchesConnection
  exportAnnotations(input: QueryExportAnnotationsInput!): Task
  exportErrors(input: QueryExportErrorsInput!): Task
  stats(input: QueryStatsInput!): Task
}
